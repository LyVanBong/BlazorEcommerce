@inject IProductService _productService
@implements IDisposable


<h3>Product List</h3>
@if (_productService.Products == null)
{
    <h3>Loadind data...</h3>
}
else
{
    <ul class="list-unstyled">
        @foreach (Product product in _productService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper my-2">
                    <a href="product/@product.Id">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                    </a>
                </div>
                <div class="media-body">
                    <a href="product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">$@GetPrice(product)</h5>
                </div>
            </li>
        }
    </ul>
}


@code {
    protected override void OnInitialized()
    {
        _productService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        _productService.ProductsChanged -= StateHasChanged;
    }

    private string GetPrice(Product product)
    {
        var variants = product.ProductVariants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return variants[0].Price + "";
        }
        decimal minPrice = variants.Min(p => p.Price);
        return $"{minPrice}";
    }
}

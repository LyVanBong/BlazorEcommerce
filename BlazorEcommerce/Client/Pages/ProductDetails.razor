@page "/product/{Id:int}"
@using BlazorEcommerce.Client.Services.CartService
@inject IProductService ProductService
@inject ICartService CartService

<h3>Product Details</h3>

@if (_product == null)
{
    <h3>@message</h3>
}
else
{
    <div class="media">
        <div class="media-img-wrapper my-2">
            <img class="media-img" src="@_product.ImageUrl" alt="@_product.Title" />
        </div>
        <div class="media-body">
            <h2 class="mb-0">@_product.Title</h2>
            <p>@_product.Description</p>
            @if (_product.ProductVariants != null && _product.ProductVariants.Count > 1)
            {
                <div class="mb-3">
                    <select class="form-select" @bind="currentTypeId">
                        @foreach (var variant in _product.ProductVariants)
                        {
                            <option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
                        }
                    </select>
                </div>
            }
            @if (GetSelectdProductVariant() != null)
            {
                if (GetSelectdProductVariant().OriginalPrice > GetSelectdProductVariant().Price)
                {
                    <h6 class="text-muted">
                        $@GetSelectdProductVariant().OriginalPrice
                    </h6>
                }
                <h4 class="price">
                    $@GetSelectdProductVariant().Price
                </h4>
            }
            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart"></i> &nbsp;&nbsp;&nbsp;&nbsp; Add To Cart
            </button>
        </div>
    </div>
}

@code {
    private Product _product;
    [Parameter]
    public int Id { get; set; }

    private int currentTypeId = 1;
    private string message = string.Empty;

    private async Task AddToCart()
    {
        var productVariant = GetSelectdProductVariant();
        var cartItem = new CartItem()
            {
                ProductId = productVariant.ProductId,
                ProductTypeId = productVariant.ProductTypeId
            };
        await CartService.AddToCart(cartItem);
    }
    protected override async Task OnParametersSetAsync()
    {
        message = "Loading product .....";
        var result = await ProductService.GetProduct(Id);
        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            _product = result.Data;
            if (_product.ProductVariants.Count > 0)
            {
                currentTypeId = _product.ProductVariants[0].ProductTypeId;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await ProductService.GetProduct(Id);
        _product = result?.Data;
    }

    private ProductVariant GetSelectdProductVariant()
    {
        var variant = _product.ProductVariants.FirstOrDefault(p => p.ProductTypeId == currentTypeId);
        return variant;
    }
}

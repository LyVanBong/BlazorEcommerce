@page "/cart"
@using BlazorEcommerce.Client.Services.CartService
@inject ICartService CartService

<h3>Shopping Cart</h3>

@if (_cartProductResponses == null || _cartProductResponses.Count == 0)
{
    <span>@_message</span>
}
else
{
    <div>
        @foreach (var product in _cartProductResponses)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5>
                        <a href="/product/@product.ProductId">
                            @product.Title
                        </a>
                    </h5>
                    <span>@product.ProductType</span>
                    <br />
                    <input type="number" value="@product.Quantity" @onchange="args => UpdateQuantity(args,product)" class="form-control input-quantity" />
                    <button class="btn-delete" @onclick=@(() => RemoveProductFromCart(product.ProductId,product.ProductTypeId))>Delete</button>
                </div>

                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="container">
            <div class="cart-product-price">
                Total (@_cartProductResponses.Count): $@_cartProductResponses.Sum(p=> ( p.Price * p.Quantity))
            </div>
        </div>
    </div>
}

@code {
    private List<CartProductResponse> _cartProductResponses = null;
    private string _message = "Loading cart.....";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse response)
    {
        response.Quantity = int.Parse(e.Value.ToString());
        if (response.Quantity < 1)
        {
            response.Quantity = 1;
        }
        await CartService.UpdateQuantityAsync(response);
    }
    private async Task LoadCart()
    {
        if ((await CartService.GetCartItems()).Count == 0)
        {
            _message = "Your cart is empty.";
            _cartProductResponses = new List<CartProductResponse>();
        }
        else
        {
            _cartProductResponses = await CartService.GetCartProductsAsync();
        }
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }
}
